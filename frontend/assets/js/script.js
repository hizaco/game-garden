// Variables globales
let socket = null;
let currentUser = null;
let gameState = null;
let currentGameId = null;
let authCheckInterval = null;
let isCheckingAuth = false; // AJOUT√â: Emp√™che les v√©rifications multiples

// Initialisation
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üåå Quantum Garden - Initialisation...');

    // V√©rifier l'authentification UNE SEULE FOIS
    const isAuthenticated = await checkAuth();

    if (isAuthenticated) {
        console.log('‚úÖ Utilisateur authentifi√©:', currentUser.username);

        // Initialiser Socket.io et le jeu
        initializeSocket();
        initializeGame();

        // V√©rifier p√©riodiquement l'auth SEULEMENT toutes les 10 minutes (pas 5!)
        authCheckInterval = setInterval(() => {
            if (!isCheckingAuth) {
                checkAuth();
            }
        }, 10 * 60 * 1000); // 10 minutes au lieu de 5
    } else {
        console.log('‚ùå Utilisateur non authentifi√©, redirection...');
        redirectToLogin();
    }

    // Event listeners
    setupEventListeners();
});

// V√©rification authentification CORRIG√âE
async function checkAuth() {
    // AJOUT√â: Emp√™che les appels multiples simultan√©s
    if (isCheckingAuth) {
        console.log('‚è≥ V√©rification auth d√©j√† en cours...');
        return currentUser !== null;
    }

    isCheckingAuth = true;

    const token = localStorage.getItem('token');

    if (!token) {
        console.log('‚ùå Aucun token trouv√©');
        isCheckingAuth = false;
        return false;
    }

    try {
        console.log('üîç V√©rification du token...');

        const response = await fetch('/api/auth/verify', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        console.log('üì° R√©ponse auth:', response.status);

        if (response.ok) {
            const data = await response.json();
            currentUser = data.user;
            console.log('‚úÖ Auth valide pour:', currentUser.username);
            updateUserInterface();
            isCheckingAuth = false;
            return true;
        } else {
            const errorData = await response.json().catch(() => ({}));
            console.log('‚ùå Auth √©chou√©e:', response.status, errorData.message);

            // SEULEMENT supprimer le token si c'est vraiment une erreur d'auth
            if (response.status === 401) {
                localStorage.removeItem('token');
                currentUser = null;
            }

            isCheckingAuth = false;
            return false;
        }
    } catch (error) {
        console.error('‚ùå Erreur v√©rification auth:', error);

        // Ne PAS supprimer le token en cas d'erreur r√©seau
        isCheckingAuth = false;

        // Si on a d√©j√† un currentUser, on reste connect√©
        return currentUser !== null;
    }
}

// Initialisation Socket.io CORRIG√âE
function initializeSocket() {
    if (socket) {
        socket.disconnect();
    }

    console.log('üåê Initialisation Socket.io...');

    socket = io({
        auth: {
            token: localStorage.getItem('token')
        },
        autoConnect: true,
        reconnection: true,
        reconnectionAttempts: 5,
        reconnectionDelay: 1000
    });

    socket.on('connect', () => {
        console.log('‚úÖ Socket connect√©:', socket.id);
        updateConnectionStatus(true);
    });

    socket.on('disconnect', (reason) => {
        console.log('‚ùå Socket d√©connect√©:', reason);
        updateConnectionStatus(false);
    });

    socket.on('connect_error', (error) => {
        console.error('‚ùå Erreur connexion socket:', error);
        updateConnectionStatus(false);
    });

    // Events de jeu
    socket.on('waiting-for-opponent', handleWaitingForOpponent);
    socket.on('game-start', handleGameStart);
    socket.on('cell-observed', handleCellObserved);
    socket.on('game-end', handleGameEnd);
    socket.on('player-left', handlePlayerLeft);
    socket.on('player-disconnected', handlePlayerDisconnected);
}

// Le reste du code reste identique...
function initializeGame() {
    console.log('üéÆ Initialisation du jeu...');
    createGameBoard();
    updateUserInterface();
}

function createGameBoard() {
    const gameBoard = document.getElementById('game-board');
    if (!gameBoard) {
        console.error('‚ùå √âl√©ment game-board introuvable');
        return;
    }

    gameBoard.innerHTML = '';

    for (let i = 0; i < 8; i++) {
        for (let j = 0; j < 8; j++) {
            const cell = document.createElement('div');
            cell.className = 'cell superposition';
            cell.dataset.x = i;
            cell.dataset.y = j;

            cell.addEventListener('click', () => observeCell(i, j));

            gameBoard.appendChild(cell);
        }
    }

    console.log('‚úÖ Grille de jeu cr√©√©e (8x8)');
}

// Fonction observeCell AM√âLIOR√âE avec plus de logs
function observeCell(x, y) {
    console.log(`üîç Tentative observation cellule [${x}, ${y}]`);

    if (!currentGameId) {
        console.log('‚ùå Pas de gameId actuel');
        showModal('Erreur', 'Aucune partie en cours!');
        return;
    }

    if (!socket) {
        console.log('‚ùå Socket non connect√©');
        showModal('Erreur', 'Connexion requise!');
        return;
    }

    if (!currentUser) {
        console.log('‚ùå Utilisateur non connect√©');
        showModal('Erreur', 'Utilisateur non connect√©!');
        return;
    }

    const cell = document.querySelector(`[data-x="${x}"][data-y="${y}"]`);
    if (!cell) {
        console.log(`‚ùå Cellule [${x}, ${y}] introuvable dans le DOM`);
        return;
    }

    if (cell.classList.contains('collapsed')) {
        console.log(`‚ùå Cellule [${x}, ${y}] d√©j√† effondr√©e`);
        showModal('Info', 'Cette cellule a d√©j√† √©t√© observ√©e!');
        return;
    }

    console.log(`‚úÖ Envoi observation [${x}, ${y}] vers serveur`);
    console.log('üì° GameID:', currentGameId);
    console.log('üë§ PlayerID:', currentUser.id);

    // Animation visuelle imm√©diate pour feedback
    cell.style.border = '2px solid #00ff88';
    cell.style.transform = 'scale(0.95)';

    setTimeout(() => {
        cell.style.border = '';
        cell.style.transform = '';
    }, 300);

    socket.emit('observe-cell', {
        gameId: currentGameId,
        x: x,
        y: y,
        playerId: currentUser.id
    });
}

function updateUserInterface() {
    if (currentUser) {
        const playerNameEl = document.getElementById('player-name');
        if (playerNameEl) {
            playerNameEl.textContent = currentUser.username;
        }
        console.log('üîÑ Interface mise √† jour pour:', currentUser.username);
    }
}

function updateConnectionStatus(connected) {
    const indicator = document.getElementById('status-indicator');
    const text = document.getElementById('status-text');

    if (indicator && text) {
        if (connected) {
            indicator.className = 'status-indicator online';
            text.textContent = 'Connect√©';
        } else {
            indicator.className = 'status-indicator offline';
            text.textContent = 'D√©connect√©';
        }
    }
}

function setupEventListeners() {
    const newGameBtn = document.getElementById('new-game-btn');
    if (newGameBtn) {
        newGameBtn.addEventListener('click', startNewGame);
    }

    const saveGameBtn = document.getElementById('save-game-btn');
    if (saveGameBtn) {
        saveGameBtn.addEventListener('click', saveGame);
    }

    const loadGameBtn = document.getElementById('load-game-btn');
    if (loadGameBtn) {
        loadGameBtn.addEventListener('click', loadGame);
    }

    const helpBtn = document.getElementById('help-btn');
    if (helpBtn) {
        helpBtn.addEventListener('click', showHelp);
    }

    const profileBtn = document.getElementById('profile-btn');
    if (profileBtn) {
        profileBtn.addEventListener('click', () => {
            window.location.href = '/profile';
        });
    }

    const logoutBtn = document.getElementById('logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', logout);
    }

    const modalClose = document.getElementById('modal-close');
    if (modalClose) {
        modalClose.addEventListener('click', closeModal);
    }

    const cancelSearch = document.getElementById('cancel-search');
    if (cancelSearch) {
        cancelSearch.addEventListener('click', cancelSearchGame);
    }

    window.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) {
            closeModal();
        }
    });

    console.log('‚úÖ Event listeners configur√©s');
}

function startNewGame() {
    if (!socket || !currentUser) {
        showModal('Erreur', 'Connexion requise pour jouer!');
        return;
    }

    console.log('üéÆ D√©marrage nouvelle partie...');

    socket.emit('join-game', {
        playerId: currentUser.id,
        playerName: currentUser.username
    });
}

// Handlers des √©v√©nements Socket.io
function handleWaitingForOpponent(data) {
    console.log('‚è≥ En attente d\'adversaire:', data);
    const queuePosition = document.getElementById('queue-position');
    if (queuePosition) {
        queuePosition.textContent = data.queuePosition;
    }
    const waitingModal = document.getElementById('waiting-modal');
    if (waitingModal) {
        waitingModal.style.display = 'block';
    }
}

// Handler am√©lior√© pour le d√©but de partie
function handleGameStart(data) {
    console.log('üéÆ Partie commenc√©e!', data);
    currentGameId = data.gameId;
    gameState = data.gameState;

    // Fermer toutes les modals
    closeModal();

    // IMPORTANT: Recr√©er la grille de jeu avec les donn√©es du serveur
    createGameBoardFromState(gameState);

    // Mettre √† jour l'interface
    updateObjectives(gameState.objectives);
    updatePlayersList(gameState.players);

    // Afficher le message de d√©but bri√®vement
    showModal('Partie commenc√©e!', 'La partie Quantum Garden a commenc√©!');

    // Fermer automatiquement le modal apr√®s 2 secondes
    setTimeout(() => {
        closeModal();
    }, 2000);
}

// NOUVELLE FONCTION: Cr√©er la grille bas√©e sur l'√©tat du serveur
function createGameBoardFromState(gameState) {
    console.log('üéÆ Cr√©ation grille depuis √©tat serveur...');

    const gameBoard = document.getElementById('game-board');
    if (!gameBoard) {
        console.error('‚ùå √âl√©ment game-board introuvable');
        return;
    }

    // Nettoyer la grille existante
    gameBoard.innerHTML = '';

    // V√©rifier que nous avons les donn√©es de grille
    if (!gameState || !gameState.grid) {
        console.error('‚ùå Donn√©es de grille manquantes');
        // Cr√©er une grille par d√©faut
        createGameBoard();
        return;
    }

    console.log('üìä Grille serveur:', gameState.grid.length, 'x', gameState.grid[0]?.length);

    // Cr√©er les cellules bas√©es sur l'√©tat du serveur
    for (let i = 0; i < 8; i++) {
        for (let j = 0; j < 8; j++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            cell.dataset.x = i;
            cell.dataset.y = j;

            // R√©cup√©rer les donn√©es de la cellule du serveur
            const cellData = gameState.grid[i] && gameState.grid[i][j] ? gameState.grid[i][j] : null;

            if (cellData) {
                if (cellData.collapsed) {
                    cell.classList.add('collapsed', cellData.type);
                    console.log(`üìç Cellule [${i},${j}] effondr√©e: ${cellData.type}`);
                } else {
                    cell.classList.add('superposition');
                }
            } else {
                // √âtat par d√©faut si pas de donn√©es
                cell.classList.add('superposition');
            }

            // IMPORTANT: Ajouter l'event listener pour chaque cellule
            cell.addEventListener('click', (event) => {
                event.preventDefault();
                event.stopPropagation();
                console.log(`üëÜ Clic sur cellule [${i},${j}]`);
                observeCell(i, j);
            });

            // Ajouter la cellule au plateau
            gameBoard.appendChild(cell);
        }
    }

    console.log('‚úÖ Grille cr√©√©e avec', gameBoard.children.length, 'cellules interactives');
}

// Handler am√©lior√© pour les cellules observ√©es
function handleCellObserved(data) {
    console.log('üëÅÔ∏è Cellule observ√©e re√ßue du serveur:', data);

    if (!data.position || data.position.x === undefined || data.position.y === undefined) {
        console.error('‚ùå Position manquante dans les donn√©es');
        return;
    }

    const { x, y } = data.position;
    const cell = document.querySelector(`[data-x="${x}"][data-y="${y}"]`);

    if (!cell) {
        console.error(`‚ùå Cellule [${x}, ${y}] introuvable pour mise √† jour`);
        return;
    }

    console.log(`‚ú® Mise √† jour cellule [${x}, ${y}] -> ${data.newState}`);

    // Retirer l'√©tat de superposition
    cell.classList.remove('superposition');

    // Ajouter l'√©tat effondr√©
    cell.classList.add('collapsed', data.newState);

    // Animation quantique
    cell.style.animation = 'quantum-collapse 0.5s ease-out';

    setTimeout(() => {
        cell.style.animation = '';
    }, 500);

    // Mettre √† jour l'√©tat du jeu
    if (data.gameState) {
        gameState = data.gameState;
        console.log('üîÑ √âtat de jeu mis √† jour');

        // V√©rifier s'il y a des objectifs atteints
        updateObjectives(gameState.objectives);
    }
}

function handleGameEnd(data) {
    console.log('üèÜ Partie termin√©e!', data);

    const isWinner = data.winner === currentUser.id;
    const message = isWinner ?
        'üéâ F√©licitations! Vous avez gagn√©!' :
        'üòû Partie termin√©e. Votre adversaire a gagn√©.';

    showModal('Fin de partie', message);

    recordGameResult(isWinner);

    currentGameId = null;
    gameState = null;
}

function handlePlayerLeft(data) {
    console.log('üëã Joueur parti:', data);
    showModal('Joueur parti', 'Votre adversaire a quitt√© la partie.');
    currentGameId = null;
    gameState = null;
}

function handlePlayerDisconnected(data) {
    console.log('üîå Joueur d√©connect√©:', data);
    showModal('D√©connexion', `${data.playerId} s'est d√©connect√©.`);
}

// D√©connexion CORRIG√âE
function logout() {
    console.log('üëã D√©connexion...');

    // IMPORTANT: Nettoyer l'interval AVANT de supprimer le token
    if (authCheckInterval) {
        clearInterval(authCheckInterval);
        authCheckInterval = null;
    }

    // Marquer qu'on ne v√©rifie plus l'auth
    isCheckingAuth = false;

    if (socket) {
        socket.disconnect();
        socket = null;
    }

    localStorage.removeItem('token');
    currentUser = null;

    redirectToLogin();
}

function redirectToLogin() {
    console.log('üîÑ Redirection vers login...');

    // S'assurer qu'on nettoie tout avant la redirection
    if (authCheckInterval) {
        clearInterval(authCheckInterval);
        authCheckInterval = null;
    }

    isCheckingAuth = false;

    window.location.href = '/login';
}

// Fonctions utilitaires
function showModal(title, message) {
    const modalTitle = document.getElementById('modal-title');
    const modalMessage = document.getElementById('modal-message');
    const gameModal = document.getElementById('game-modal');

    if (modalTitle && modalMessage && gameModal) {
        modalTitle.textContent = title;
        modalMessage.textContent = message;
        gameModal.style.display = 'block';
    }
}

function closeModal() {
    document.querySelectorAll('.modal').forEach(modal => {
        modal.style.display = 'none';
    });
}

function cancelSearchGame() {
    if (socket) {
        socket.emit('cancel-search');
    }
    closeModal();
}

// Correction de la fonction updateGameBoard
function updateGameBoard(gameState) {
    if (!gameState || !gameState.grid) {
        console.log('‚ùå Pas de donn√©es de grille √† mettre √† jour');
        return;
    }

    console.log('üîÑ Mise √† jour compl√®te du plateau');

    for (let i = 0; i < 8; i++) {
        for (let j = 0; j < 8; j++) {
            const cell = document.querySelector(`[data-x="${i}"][data-y="${j}"]`);
            const cellData = gameState.grid[i] && gameState.grid[i][j] ? gameState.grid[i][j] : null;

            if (cell && cellData) {
                // Nettoyer toutes les classes
                cell.className = 'cell';

                if (cellData.collapsed) {
                    cell.classList.add('collapsed', cellData.type);
                } else {
                    cell.classList.add('superposition');
                }
            }
        }
    }
}

function updateObjectives(objectives) {
    if (!objectives) return;

    const flowersEl = document.getElementById('flowers-needed');
    const treesEl = document.getElementById('trees-needed');
    const crystalsEl = document.getElementById('crystals-needed');

    if (flowersEl) flowersEl.textContent = objectives.flowers;
    if (treesEl) treesEl.textContent = objectives.trees;
    if (crystalsEl) crystalsEl.textContent = objectives.crystals;
}

// Fonction pour d√©bugger l'√©tat actuel
function debugGameState() {
    console.log('üîç DEBUG - √âtat du jeu:');
    console.log('GameID actuel:', currentGameId);
    console.log('Socket connect√©:', socket ? socket.connected : 'Non');
    console.log('Utilisateur:', currentUser);
    console.log('√âtat de jeu:', gameState);

    const cells = document.querySelectorAll('.cell');
    console.log('Cellules dans le DOM:', cells.length);

    cells.forEach((cell, index) => {
        if (index < 5) { // Log seulement les 5 premi√®res
            console.log(`Cellule [${cell.dataset.x}, ${cell.dataset.y}]:`, cell.className);
        }
    });
}

// Ajouter un raccourci clavier pour debug
document.addEventListener('keydown', (event) => {
    if (event.ctrlKey && event.key === 'd') {
        event.preventDefault();
        debugGameState();
    }
});


function updatePlayersList(players) {
    const playersList = document.getElementById('players-list');
    if (!players || !playersList) return;

    playersList.innerHTML = players.map(player =>
        `<div class="player-item">
            <span class="player-name">${player.playerName}</span>
            <span class="player-status">En ligne</span>
        </div>`
    ).join('');
}

async function saveGame() {
    if (!gameState) {
        showModal('Erreur', 'Aucune partie en cours √† sauvegarder!');
        return;
    }

    try {
        const response = await fetch('/api/game/save', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({ gameData: gameState })
        });

        const data = await response.json();

        if (response.ok) {
            showModal('Succ√®s', 'Partie sauvegard√©e avec succ√®s!');
        } else {
            showModal('Erreur', data.message || 'Erreur lors de la sauvegarde');
        }
    } catch (error) {
        console.error('Erreur sauvegarde:', error);
        showModal('Erreur', 'Erreur lors de la sauvegarde');
    }
}

async function loadGame() {
    try {
        const response = await fetch('/api/game/load', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        const data = await response.json();

        if (response.ok) {
            gameState = data.gameData;
            updateGameBoard(gameState);
            showModal('Succ√®s', 'Partie charg√©e avec succ√®s!');
        } else {
            showModal('Erreur', data.message || 'Aucune sauvegarde trouv√©e');
        }
    } catch (error) {
        console.error('Erreur chargement:', error);
        showModal('Erreur', 'Erreur lors du chargement');
    }
}



function showHelp() {
    const helpModal = document.getElementById('help-modal');
    if (helpModal) {
        helpModal.style.display = 'block';
    }
}

async function recordGameResult(isWinner) {
    try {
        const endpoint = isWinner ? '/api/game/win' : '/api/game/loss';
        await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
    } catch (error) {
        console.error('Erreur enregistrement r√©sultat:', error);
    }
}

// Nettoyage √† la fermeture de la page
window.addEventListener('beforeunload', () => {
    if (authCheckInterval) {
        clearInterval(authCheckInterval);
    }
    if (socket) {
        socket.disconnect();
    }
});

console.log('üåå Quantum Garden - Script principal charg√©!');
